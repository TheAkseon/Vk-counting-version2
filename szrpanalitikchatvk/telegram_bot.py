"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç
"""
import asyncio
import io
from datetime import datetime
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger
from config import config
from database_sqlite import db
from analyzer import ChatAnalyzer
from csv_parser import CSVParser
from export import DataExporter

class TelegramBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.message.register(self.handle_document, lambda m: m.document is not None)
        self.dp.callback_query.register(self.handle_stats_callback, lambda c: c.data == "stats")
        self.dp.callback_query.register(self.handle_analyze_callback, lambda c: c.data == "analyze")
        self.dp.callback_query.register(self.handle_export_callback, lambda c: c.data == "export")
        self.dp.callback_query.register(self.handle_upload_csv_callback, lambda c: c.data == "upload_csv")
        self.dp.callback_query.register(self.handle_start_callback, lambda c: c.data == "start")
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.save_telegram_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="upload_csv")],
            [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")]
        ])
        
        await message.answer(
            "ü§ñ **VK Chat Analyzer Bot**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def handle_stats_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞
            csv_parser = CSVParser()
            if not csv_parser.is_csv_available():
                await callback.message.edit_text(
                    "‚ùå **CSV —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω**\n\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ VK —á–∞—Ç–æ–≤.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="upload_csv")],
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –∏–∑ CSV
            vk_chats = csv_parser.parse_csv()
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            csv_group_ids = {chat['group_id'] for chat in vk_chats}
            csv_chats_count = len(vk_chats)  # –í—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–∞—Ç–æ–≤ –≤ CSV
            
            # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ-—á–∞—Ç–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
            all_unique_members = set()
            csv_total_messages = 0  # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º, –∞ –Ω–µ —á–µ—Ä–µ–∑ set()
            chats_stats = await db.get_chats_stats()
            
            for chat in chats_stats:
                if chat['group_id'] in csv_group_ids:
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
                    chat_id = await db.get_chat_id_by_group_id(chat['group_id'])
                    if chat_id:
                        members = await db.get_chat_members(chat_id)
                        all_unique_members.update(members)
                        
                        # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                        if members:
                            placeholders = ','.join(['?' for _ in members])
                            async with db.connection.execute(f"""
                                SELECT COUNT(DISTINCT m.message_id) 
                                FROM messages m 
                                JOIN users u ON m.user_id = u.id 
                                WHERE m.chat_id = ? AND u.vk_id IN ({placeholders})
                            """, [chat_id] + [str(member) for member in members]) as cursor:
                                chat_messages_count = (await cursor.fetchone())[0] or 0
                                csv_total_messages += chat_messages_count  # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
            
            csv_total_members = len(all_unique_members)
            csv_total_authors = len(all_unique_members)  # –ê–≤—Ç–æ—Ä—ã = —É—á–∞—Å—Ç–Ω–∏–∫–∏
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø–æ-—á–∞—Ç–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
            all_today_authors = set()
            csv_today_messages = 0  # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º, –∞ –Ω–µ —á–µ—Ä–µ–∑ set()
            
            for chat in chats_stats:
                if chat['group_id'] in csv_group_ids:
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    chat_id = await db.get_chat_id_by_group_id(chat['group_id'])
                    if chat_id:
                        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
                        members = await db.get_chat_members(chat_id)
                        if members:
                            from datetime import date
                            today = date.today()
                            placeholders = ','.join(['?' for _ in members])
                            
                            # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–æ–ª—å–∫–æ –æ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                            async with db.connection.execute(f"""
                                SELECT COUNT(DISTINCT m.message_id) 
                                FROM messages m 
                                JOIN users u ON m.user_id = u.id 
                                WHERE m.chat_id = ? AND DATE(m.date) = ? AND u.vk_id IN ({placeholders})
                            """, [chat_id, today] + [str(member) for member in members]) as cursor:
                                chat_today_messages = (await cursor.fetchone())[0] or 0
                                csv_today_messages += chat_today_messages  # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
                            
                            # –ê–≤—Ç–æ—Ä—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–æ–ª—å–∫–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
                            async with db.connection.execute(f"""
                                SELECT DISTINCT u.vk_id 
                                FROM messages m 
                                JOIN users u ON m.user_id = u.id 
                                WHERE m.chat_id = ? AND DATE(m.date) = ? AND u.vk_id IN ({placeholders})
                            """, [chat_id, today] + [str(member) for member in members]) as cursor:
                                authors = await cursor.fetchall()
                                all_today_authors.update(author[0] for author in authors)
            
            csv_today_authors = len(all_today_authors)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–∞—Ç–æ–≤ –≤ CSV)
            if len(vk_chats) == 0:
                report = (
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VK —á–∞—Ç–æ–≤**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –ß–∞—Ç–æ–≤ –≤ CSV: {len(vk_chats)}\n\n"
                    f"‚ö†Ô∏è **–ü–æ–∫–∞ —á—Ç–æ –≤—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –∞–Ω–∞–ª–∏–∑!**\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑\""
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            else:
                success_rate = 100.0
                report = (
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VK —á–∞—Ç–æ–≤**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –ß–∞—Ç–æ–≤ –≤ CSV: {len(vk_chats)}\n"
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {csv_chats_count}\n\n"
                    f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {csv_total_members}\n"
                    f"‚Ä¢ üí¨ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {csv_total_messages}\n"
                    f"**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                    f"‚Ä¢ üí¨ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {csv_today_messages}\n"
                    f"‚Ä¢ üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {csv_today_authors}\n\n"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            
            await callback.message.edit_text(
                report,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            )
    
    async def handle_analyze_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞
            csv_parser = CSVParser()
            if not csv_parser.is_csv_available():
                await callback.message.edit_text(
                    "‚ùå **CSV —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω**\n\n"
                    "–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ VK —á–∞—Ç–æ–≤.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="upload_csv")],
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                    ])
                )
                return
            
            analyzer = ChatAnalyzer(db)
            results = await analyzer.analyze_all_chats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
            errors = [r for r in results if "error" in r]
            if errors:
                error_msg = "\n".join([f"‚Ä¢ ‚ùå {r['chat_name']}: {r['error']}" for r in errors])
                await callback.message.edit_text(
                    f"‚ùå **–û—à–∏–±–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:**\n\n{error_msg}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")]
                    ])
                )
            else:
                # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏)
                all_unique_members = set()
                for r in results:
                    all_unique_members.update(r.get('filtered_members', []))
                
                total_members = sum(len(r.get('filtered_members', [])) for r in results)
                total_messages = sum(len(r.get('filtered_messages', [])) for r in results)
                total_unique_members = len(all_unique_members)
                total_unique_messages = sum(len(r.get('filtered_messages', [])) for r in results)
                
                report = (
                    f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {results[0]['analysis_date']}\n"
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(results)}\n\n"
                    f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –º–µ—Å—è—Ü): {total_messages}\n"
                    f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_unique_members}\n"
                    f"**–ü–æ —á–∞—Ç–∞–º:**\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                for result in results:
                    members_count = len(result.get('filtered_members', []))
                    messages_count = len(result.get('filtered_messages', []))
                    
                    report += f"‚Ä¢ {result['chat_name']}: üë• {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, üí¨ {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                    [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
                
                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –∏–∑ CSV –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                csv_parser = CSVParser()
                vk_chats = csv_parser.parse_csv()
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ –∏–∑ CSV
                csv_today_messages = 0
                csv_today_authors = 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–æ–≤ –∏–∑ CSV
                chats_stats = await db.get_chats_stats()
                csv_group_ids = {chat['group_id'] for chat in vk_chats}
                
                for chat in chats_stats:
                    if chat['group_id'] in csv_group_ids:
                        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                        chat_id = await db.get_chat_id_by_group_id(chat['group_id'])
                        if chat_id:
                            today_stats = await db.get_today_stats_for_chat(chat_id)
                            csv_today_messages += today_stats['messages']
                            csv_today_authors += today_stats['authors']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –ø–æ —á–∞—Ç–∞–º
                general_report = (
                    f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {results[0]['analysis_date']}\n"
                )
                
                await callback.message.edit_text(
                    general_report,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"Error running analysis: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            )
    
    async def handle_export_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ—Ç CSV —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        await callback.answer("üì• –°–æ–∑–¥–∞—é CSV —Ñ–∞–π–ª...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CSV —Ñ–∞–π–ª–∞
            csv_parser = CSVParser()
            if not csv_parser.is_csv_available():
                await callback.message.edit_text(
                    "‚ùå **CSV —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω**\n\n"
                    "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ VK —á–∞—Ç–æ–≤.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="upload_csv")],
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                    ])
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats = await db.get_stats()
            
            if not stats.get('has_data', False):
                await callback.message.edit_text(
                    "‚ö†Ô∏è **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!**\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                    ])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º CSV —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞)
            csv_content = await self._create_stats_csv_from_csv(stats)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            filename = f"vk_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            await callback.message.answer_document(
                types.BufferedInputFile(
                    csv_content.encode('utf-8'),
                    filename=filename
                ),
                caption=f"üìä **–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ VK —á–∞—Ç–æ–≤**\n\n"
                       f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                       f"üìÅ –§–∞–π–ª: {filename}"
            )
            
        except Exception as e:
            logger.error(f"Error creating export: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            )
    
    async def _create_stats_csv(self, stats: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(["VK Chat Statistics Export"])
        writer.writerow([])
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        writer.writerow(["1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:"])
        writer.writerow(["–î–∞—Ç–∞:", datetime.now().strftime('%d.%m.%Y %H:%M')])
        writer.writerow(["–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤:", stats['total_chats']])
        writer.writerow([])
        writer.writerow(["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"])
        writer.writerow(["–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", stats['total_unique_members']])
        writer.writerow(["–°–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –º–µ—Å—è—Ü):", stats['total_unique_messages']])
        writer.writerow([])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
        writer.writerow(["2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É:"])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç–∞–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chats_stats = await db.get_chats_stats()
        for chat in chats_stats:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_id = await db.get_chat_id_by_group_id(chat['group_id'])
            if chat_id:
                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
                members = await db.get_chat_members(chat_id)
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç —ç—Ç–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if members:
                    placeholders = ','.join(['?' for _ in members])
                    async with db.connection.execute(f"""
                        SELECT COUNT(DISTINCT m.message_id) 
                        FROM messages m 
                        JOIN users u ON m.user_id = u.id 
                        WHERE m.chat_id = ? AND u.vk_id IN ({placeholders})
                    """, [chat_id] + [str(member) for member in members]) as cursor:
                        messages_count = (await cursor.fetchone())[0] or 0
                else:
                    messages_count = 0
                
                writer.writerow([
                    f"id –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞: {chat['group_id']}",
                    f"{len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,",
                    f"{messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
                ])
            else:
                # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–∏
                writer.writerow([
                    f"id –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞: {chat['group_id']}",
                    f"0 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,",
                    f"0 —Å–æ–æ–±—â–µ–Ω–∏–π"
                ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Windows Excel
        csv_content = output.getvalue()
        return '\ufeff' + csv_content
    
    async def _create_stats_csv_from_csv(self, stats: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(["VK Chat Statistics Export"])
        writer.writerow([])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞
        csv_parser = CSVParser()
        vk_chats = csv_parser.parse_csv()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        writer.writerow(["1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:"])
        writer.writerow(["–î–∞—Ç–∞:", datetime.now().strftime('%d.%m.%Y %H:%M')])
        writer.writerow(["–ß–∞—Ç–æ–≤ –≤ CSV:", len(vk_chats)])
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ –∏–∑ CSV
        csv_group_ids = {chat['group_id'] for chat in vk_chats}
        processed_chats = len(vk_chats)  # –í—Å–µ–≥–¥–∞ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —á–∞—Ç–æ–≤ –≤ CSV
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if not db.connection:
            await db.initialize()
        
        # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ-—á–∞—Ç–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
        all_unique_members = set()
        total_messages = 0  # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º, –∞ –Ω–µ —á–µ—Ä–µ–∑ set()
        chats_stats = await db.get_chats_stats()
        
        for chat in chats_stats:
            if chat['group_id'] in csv_group_ids:
                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
                chat_id = await db.get_chat_id_by_group_id(chat['group_id'])
                if chat_id:
                    members = await db.get_chat_members(chat_id)
                    all_unique_members.update(members)
                    
                    # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                    if members:
                        placeholders = ','.join(['?' for _ in members])
                        async with db.connection.execute(f"""
                            SELECT COUNT(DISTINCT m.message_id) 
                            FROM messages m 
                            JOIN users u ON m.user_id = u.id 
                            WHERE m.chat_id = ? AND u.vk_id IN ({placeholders})
                        """, [chat_id] + [str(member) for member in members]) as cursor:
                            chat_messages_count = (await cursor.fetchone())[0] or 0
                            total_messages += chat_messages_count  # –°—É–º–º–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
        
        total_members = len(all_unique_members)
        
        writer.writerow(["–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤:", processed_chats])
        writer.writerow([])
        
        writer.writerow(["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"])
        writer.writerow(["–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", total_members])
        writer.writerow(["–°–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –º–µ—Å—è—Ü):", total_messages])
        writer.writerow([])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º –∏–∑ CSV —Ñ–∞–π–ª–∞
        writer.writerow(["2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É:"])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç–∞–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∞—Ç–æ–≤ –∏–∑ CSV
        chats_stats = await db.get_chats_stats()
        csv_group_ids = {chat['group_id'] for chat in vk_chats}
        
        for chat in chats_stats:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ CSV —Ñ–∞–π–ª–µ
            if chat['group_id'] in csv_group_ids:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
                chat_id = await db.get_chat_id_by_group_id(chat['group_id'])
                if chat_id:
                    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
                    members = await db.get_chat_members(chat_id)
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç —ç—Ç–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    if members:
                        placeholders = ','.join(['?' for _ in members])
                        async with db.connection.execute(f"""
                            SELECT COUNT(DISTINCT m.message_id) 
                            FROM messages m 
                            JOIN users u ON m.user_id = u.id 
                            WHERE m.chat_id = ? AND u.vk_id IN ({placeholders})
                        """, [chat_id] + [str(member) for member in members]) as cursor:
                            messages_count = (await cursor.fetchone())[0] or 0
                    else:
                        messages_count = 0
                    
                    writer.writerow([
                        f"id –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞: {chat['group_id']}",
                        f"{len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,",
                        f"{messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π"
                    ])
                else:
                    # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–∏
                    writer.writerow([
                        f"id –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞: {chat['group_id']}",
                        f"0 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,",
                        f"0 —Å–æ–æ–±—â–µ–Ω–∏–π"
                    ])
        
        writer.writerow([])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–µ
        writer.writerow(["3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–µ:"])
        writer.writerow(["–§–∞–π–ª:", "data/vk_chats.csv"])
        writer.writerow(["–ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤:", len(vk_chats)])
        writer.writerow([])
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ CSV
        writer.writerow(["4. –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ CSV:"])
        for i, chat in enumerate(vk_chats, 1):
            writer.writerow([
                f"–ß–∞—Ç {i}:",
                f"ID: {chat['group_id']}",
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat.get('chat_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
                f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if chat.get('is_active', True) else '–ù–µ—Ç'}"
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Windows Excel
        csv_content = output.getvalue()
        return '\ufeff' + csv_content
    
    async def handle_upload_csv_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ CSV"""
        await callback.answer("üìä –û–∂–∏–¥–∞—é CSV —Ñ–∞–π–ª...")
        
        await callback.message.edit_text(
            "üìä **–ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ VK —á–∞—Ç–æ–≤.\n\n"
            "**–§–æ—Ä–º–∞—Ç CSV:**\n"
            "```\n"
            "group_id,token,chat_name,is_active\n"
            "230351857,vk1.a.token1,–ß–∞—Ç 1,1\n"
            "230482562,vk1.a.token2,–ß–∞—Ç 2,1\n"
            "```\n\n"
            "**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:**\n"
            "‚Ä¢ `group_id` - ID –≥—Ä—É–ø–ø—ã VK\n"
            "‚Ä¢ `token` - —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ VK API\n"
            "‚Ä¢ `chat_name` - –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "‚Ä¢ `is_active` - –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —á–∞—Ç (1/0)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–µ–π—á–∞—Å:",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="start")]
            ])
        )
    
    async def handle_document(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            if not message.document:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not message.document.file_name.lower().endswith('.csv'):
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await self.bot.get_file(message.document.file_id)
            file_path = f"data/{message.document.file_name}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            import os
            os.makedirs("data", exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            await self.bot.download_file(file.file_path, file_path)
            
            # –ü–∞—Ä—Å–∏–º CSV
            csv_parser = CSVParser(file_path)
            chats = csv_parser.parse_csv()
            
            if not chats:
                await message.answer(
                    "‚ùå **–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV**\n\n"
                    "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    "‚Ä¢ –ï—Å—Ç—å –ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏: group_id,token,chat_name,is_active\n"
                    "‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ group_id –∏ token\n"
                    "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω is_active (1/0)",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="upload_csv")]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ
            csv_parser.csv_file_path = "data/vk_chats.csv"
            csv_parser.save_csv(open(file_path, 'r', encoding='utf-8').read())
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)
            
            await message.answer(
                f"‚úÖ **CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!**\n\n"
                f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}\n"
                f"üìÅ –§–∞–π–ª: {message.document.file_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
                ])
            )
            
        except Exception as e:
            logger.error(f"Error handling document: {e}")
            await message.answer(
                f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞**\n\n{str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="upload_csv")]
                ])
            )
    
    async def handle_start_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
        await callback.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å CSV", callback_data="upload_csv")],
            [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")]
        ])
        
        await callback.message.edit_text(
            "ü§ñ **VK Chat Analyzer Bot**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def _send_long_message(self, message, text, keyboard=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏"""
        MAX_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        
        if len(text) <= MAX_LENGTH:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            await message.edit_text(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            return
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = []
        current_part = ""
        lines = text.split('\n')
        
        for line in lines:
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
            if len(current_part + line + '\n') <= MAX_LENGTH:
                current_part += line + '\n'
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                if current_part:
                    parts.append(current_part.strip())
                current_part = line + '\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            parts.append(current_part.strip())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.edit_text(
            parts[0],
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, part in enumerate(parts[1:], 1):
            await message.reply(
                f"**–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ {i+1}/{len(parts)}:**\n\n{part}",
                parse_mode="Markdown"
            )
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot...")
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.session.close()
