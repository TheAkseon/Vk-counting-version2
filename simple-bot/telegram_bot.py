"""
–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç
"""
import asyncio
import io
from datetime import datetime
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger
from config import config
from database_sqlite import db
from analyzer import ChatAnalyzer
from export import DataExporter

class TelegramBot:
    """–ü—Ä–æ—Å—Ç–æ–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot = Bot(token=config.TELEGRAM_BOT_TOKEN)
        self.dp = Dispatcher()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.callback_query.register(self.handle_stats_callback, lambda c: c.data == "stats")
        self.dp.callback_query.register(self.handle_analyze_callback, lambda c: c.data == "analyze")
        self.dp.callback_query.register(self.handle_export_callback, lambda c: c.data == "export")
        self.dp.callback_query.register(self.handle_export_all_callback, lambda c: c.data == "export_all")
        self.dp.callback_query.register(self.handle_export_chats_callback, lambda c: c.data == "export_chats")
        self.dp.callback_query.register(self.handle_export_users_callback, lambda c: c.data == "export_users")
        self.dp.callback_query.register(self.handle_export_messages_callback, lambda c: c.data == "export_messages")
        self.dp.callback_query.register(self.handle_export_stats_callback, lambda c: c.data == "export_stats")
    
    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
            [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")]
        ])
        
        await message.answer(
            "ü§ñ **VK Chat Analyzer Bot**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    
    async def handle_stats_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            stats = await db.get_stats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            if not stats.get('has_data', False):
                report = (
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VK —á–∞—Ç–æ–≤**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"‚ö†Ô∏è **–ü–æ–∫–∞ —á—Ç–æ –≤—ã –Ω–µ –¥–µ–ª–∞–ª–∏ –∞–Ω–∞–ª–∏–∑!**\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑\""
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")]
                ])
            else:
                report = (
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VK —á–∞—Ç–æ–≤**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"‚Ä¢ üí¨ –ß–∞—Ç–æ–≤: {stats['total_chats']}\n"
                    f"‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_unique_members']}\n"
                    f"‚Ä¢ üí¨ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_unique_messages']}\n"
                    f"‚Ä¢ üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {stats['unique_authors']}\n\n"
                    f"**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"
                    f"‚Ä¢ üí¨ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['today_unique_messages']}\n"
                    f"‚Ä¢ üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {stats['today_unique_authors']}"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")]
                ])
            
            await callback.message.edit_text(
                report,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error getting stats: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")]
                ])
            )
    
    async def handle_analyze_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        await callback.answer("üöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
        
        try:
            analyzer = ChatAnalyzer(db)
            results = await analyzer.analyze_all_chats()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏
            errors = [r for r in results if "error" in r]
            if errors:
                error_msg = "\n".join([f"‚Ä¢ ‚ùå {r['chat_name']}: {r['error']}" for r in errors])
                await callback.message.edit_text(
                    f"‚ùå **–û—à–∏–±–∫–∏ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:**\n\n{error_msg}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")]
                    ])
                )
            else:
                # –°—É–º–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                total_members = sum(len(r.get('filtered_members', [])) for r in results)
                total_messages = sum(len(r.get('filtered_messages', [])) for r in results)
                total_unique_members = sum(len(r.get('filtered_members', [])) for r in results)
                total_unique_messages = sum(len(r.get('filtered_messages', [])) for r in results)
                
                report = (
                    f"‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"üìÖ –î–∞—Ç–∞: {results[0]['analysis_date']}\n"
                    f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(results)}\n\n"
                    f"**–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}\n"
                    f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –º–µ—Å—è—Ü): {total_messages}\n"
                    f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_unique_members}\n"
                    f"üî¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {total_unique_messages}\n\n"
                    f"**–ü–æ —á–∞—Ç–∞–º:**\n"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
                for result in results:
                    report += f"‚Ä¢ üí¨ {result['chat_name']}: üë• {len(result.get('filtered_members', []))} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, üí¨ {len(result.get('filtered_messages', []))} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats")],
                    [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="export")]
                ])
                
                await callback.message.edit_text(
                    report,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                
        except Exception as e:
            logger.error(f"Error running analysis: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")]
                ])
            )
    
    async def handle_export_callback(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é"""
        await callback.answer("üì• –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞...")
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç)", callback_data="export_all")],
            [InlineKeyboardButton(text="üí¨ –ß–∞—Ç—ã", callback_data="export_chats")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users")],
            [InlineKeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è", callback_data="export_messages")],
            [InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="export_stats")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="stats")]
        ])
        
        await callback.message.edit_text(
            "üì• **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=keyboard
        )
    
    async def handle_export_all_callback(self, callback: types.CallbackQuery):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...")
        await self._export_data(callback, "all", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ (—Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç)")
    
    async def handle_export_chats_callback(self, callback: types.CallbackQuery):
        """–≠–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤"""
        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —á–∞—Ç—ã...")
        await self._export_data(callback, "chats", "–ß–∞—Ç—ã")
    
    async def handle_export_users_callback(self, callback: types.CallbackQuery):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        await self._export_data(callback, "users", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    async def handle_export_messages_callback(self, callback: types.CallbackQuery):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        await self._export_data(callback, "messages", "–°–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_export_stats_callback(self, callback: types.CallbackQuery):
        """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        await self._export_data(callback, "stats", "–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    async def _export_data(self, callback: types.CallbackQuery, export_type: str, description: str):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            exporter = DataExporter()
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
            if export_type == "all":
                csv_data = await exporter.export_all_data_to_csv()
            elif export_type == "chats":
                csv_data = await exporter.export_chats_to_csv()
            elif export_type == "users":
                csv_data = await exporter.export_users_to_csv()
            elif export_type == "messages":
                csv_data = await exporter.export_messages_to_csv()
            elif export_type == "stats":
                csv_data = await exporter.export_daily_stats_to_csv()
            else:
                csv_data = ""
            
            if not csv_data:
                await callback.message.edit_text(
                    f"**–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ {description}**\n\n"
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                        [InlineKeyboardButton(text="üì• –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞", callback_data="export")]
                    ])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            filename = f"vk_{export_type}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                types.FSInputFile(
                    io.BytesIO(csv_data.encode('utf-8-sig')),  # UTF-8 BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
                    filename=filename
                ),
                caption=(
                    f"üì• **–≠–∫—Å–ø–æ—Ä—Ç: {description}**\n\n"
                    f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –§–æ—Ä–º–∞—Ç: CSV\n"
                    f"üìÅ –§–∞–π–ª: {filename}"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì• –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞", callback_data="export")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
                ])
            )
            
        except Exception as e:
            logger.error(f"Error creating export {export_type}: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ {description}: {str(e)}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="analyze")],
                    [InlineKeyboardButton(text="üì• –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞", callback_data="export")]
                ])
            )
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot...")
        await self.dp.start_polling(self.bot)
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        await self.bot.session.close()
