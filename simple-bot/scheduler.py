"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""
import asyncio
from datetime import datetime, time, timedelta
from loguru import logger
from database_sqlite import db
from analyzer import ChatAnalyzer
from telegram_bot import TelegramBot
from config import config
from aiogram import types

class Scheduler:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    
    def __init__(self):
        self.running = False
        self.telegram_bot = None
    
    def set_telegram_bot(self, telegram_bot: TelegramBot):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.telegram_bot = telegram_bot
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True
        logger.info("Scheduler started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ 02:00
        asyncio.create_task(self._daily_analysis_task())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await self._monitor()
    
    async def _daily_analysis_task(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
        while self.running:
            try:
                now = datetime.now()
                target_time = time(00, 14)  
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                next_run = datetime.combine(now.date(), target_time)
                if next_run <= now:
                    next_run = datetime.combine(now.date() + timedelta(days=1), target_time)
                
                wait_seconds = (next_run - now).total_seconds()
                logger.info(f"Next daily analysis scheduled for {next_run}")
                
                await asyncio.sleep(wait_seconds)
                
                if self.running:
                    logger.info("Starting daily analysis...")
                    await self._run_daily_analysis()
                    
            except Exception as e:
                logger.error(f"Error in daily analysis task: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _run_daily_analysis(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            logger.info("Starting daily analysis...")
            analyzer = ChatAnalyzer(db)
            results = await analyzer.analyze_all_chats()
            
            if not results:
                logger.error("Daily analysis failed: No results")
                if self.telegram_bot:
                    await self._send_error_notification("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_members = sum(len(r.get('filtered_members', [])) for r in results)
                total_messages = sum(len(r.get('filtered_messages', [])) for r in results)
                logger.info(f"Daily analysis completed: {len(results)} chats, {total_members} members, {total_messages} messages")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ç–∞–±–ª–∏—Ü—É
                if self.telegram_bot:
                    await self._send_daily_report(results)
                
        except Exception as e:
            logger.error(f"Failed to run daily analysis: {e}")
            if self.telegram_bot:
                await self._send_error_notification(f"–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    async def _monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def _send_daily_report(self, results):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å CSV –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º CSV —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
            csv_content = await self._create_daily_report_csv(results)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            filename = f"daily_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
            users = await db.get_all_telegram_users()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user in users:
                try:
                    await self.telegram_bot.bot.send_document(
                        chat_id=user['user_id'],
                        document=types.BufferedInputFile(
                            csv_content.encode('utf-8-sig'),
                            filename=filename
                        ),
                        caption=f"üìä **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç VK —á–∞—Ç–æ–≤**\n\n"
                               f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                               f"üìÅ –§–∞–π–ª: {filename}\n\n"
                               f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
                    )
                    logger.info(f"Daily report sent to user {user['user_id']}")
                except Exception as e:
                    logger.error(f"Failed to send report to user {user['user_id']}: {e}")
            
            logger.info(f"Daily report sent to {len(users)} users")
            
        except Exception as e:
            logger.error(f"Failed to send daily report: {e}")
    
    async def _create_daily_report_csv(self, results):
        """–°–æ–∑–¥–∞–µ—Ç CSV —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞"""
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(["VK Chat Statistics Export"])
        writer.writerow([])
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_members = sum(len(r.get('filtered_members', [])) for r in results)
        total_messages = sum(len(r.get('filtered_messages', [])) for r in results)
        
        writer.writerow(["1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:"])
        writer.writerow([f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"])
        writer.writerow([f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(results)}"])
        writer.writerow([f"–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"])
        writer.writerow([f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"])
        writer.writerow([f"–°–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –º–µ—Å—è—Ü): {total_messages}"])
        writer.writerow([])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
        writer.writerow(["2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É:"])
        for result in results:
            group_id = result.get('group_id', 'Unknown')
            members_count = len(result.get('filtered_members', []))
            messages_count = len(result.get('filtered_messages', []))
            writer.writerow([f"id –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞: {group_id}"])
            writer.writerow([f"{members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, {messages_count} —Å–æ–æ–±—â–µ–Ω–∏–π"])
        
        writer.writerow([])
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–µ
        writer.writerow(["3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CSV —Ñ–∞–π–ª–µ:"])
        writer.writerow([f"–§–∞–π–ª: data/vk_chats.csv"])
        writer.writerow([f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤: {len(results)}"])
        
        # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ CSV
        writer.writerow([])
        writer.writerow(["4. –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏–∑ CSV:"])
        vk_chats = config.get_vk_chats()
        for i, chat in enumerate(vk_chats, 1):
            writer.writerow([f"–ß–∞—Ç {i}: ID: {chat['group_id']} –ù–∞–∑–≤–∞–Ω–∏–µ: {chat['chat_name']} –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if chat['is_active'] else '–ù–µ—Ç'}"])
        
        csv_content = output.getvalue()
        return '\ufeff' + csv_content  # –î–æ–±–∞–≤–ª—è–µ–º BOM –¥–ª—è Windows Excel
    
    async def _send_error_notification(self, error_message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        try:
            await self.telegram_bot.bot.send_message(
                chat_id=config.TELEGRAM_ADMIN_CHAT_ID,
                text=f"‚ùå **–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞**\n\n{error_message}"
            )
        except Exception as e:
            logger.error(f"Failed to send error notification: {e}")
    
    async def _create_stats_csv(self, stats: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç CSV —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(["VK Chat Statistics Export"])
        writer.writerow([])
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        writer.writerow(["1. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º:"])
        writer.writerow(["–î–∞—Ç–∞:", datetime.now().strftime('%d.%m.%Y %H:%M')])
        writer.writerow(["–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤:", stats['total_chats']])
        writer.writerow([])
        writer.writerow(["–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"])
        writer.writerow(["–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", stats['total_unique_members']])
        writer.writerow(["–°–æ–æ–±—â–µ–Ω–∏–π (–∑–∞ –º–µ—Å—è—Ü):", stats['total_unique_messages']])
        writer.writerow([])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç–∞–º
        writer.writerow(["2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É:"])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Ç–∞–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chats_stats = await db.get_chats_stats()
        for chat in chats_stats:
            writer.writerow([
                f"id –≥—Ä—É–ø–ø—ã —á–∞—Ç–∞: {chat['group_id']}",
                f"{chat['unique_members']} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤,",
                f"{chat['unique_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π"
            ])
        
        return output.getvalue()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        logger.info("Scheduler stopped")
